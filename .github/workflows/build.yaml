'on':
  push:
    branches:
      - '*'
  pull_request: null
jobs:
  #  check:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: actions/cache@v1
  #        with:
  #          path: ~/.cargo/registry
  #          key: '${{ runner.os }}-cargo-registry-${{ hashFiles(''**/Cargo.lock'') }}'
  #      - uses: actions/cache@v1
  #        with:
  #          path: ~/.cargo/git
  #          key: '${{ runner.os }}-cargo-index-${{ hashFiles(''**/Cargo.lock'') }}'
  #      - uses: actions/cache@v1
  #        with:
  #          path: target
  #          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
  #      - uses: actions-rs/toolchain@v1
  #        with:
  #          profile: minimal
  #          toolchain: stable
  #          override: true
  #      - uses: actions-rs/cargo@v1
  #        with:
  #          command: check
  #  test:
  #    runs-on: '${{ matrix.os }}'
  #    strategy:
  #      matrix:
  #        include:
  #          - os: macos-latest
  #          - os: ubuntu-latest
  #          - os: windows-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: actions/cache@v1
  #        with:
  #          path: ~/.cargo/registry
  #          key: '${{ runner.os }}-cargo-registry-${{ hashFiles(''**/Cargo.lock'') }}'
  #      - uses: actions/cache@v1
  #        with:
  #          path: ~/.cargo/git
  #          key: '${{ runner.os }}-cargo-index-${{ hashFiles(''**/Cargo.lock'') }}'
  #      - uses: actions/cache@v1
  #        with:
  #          path: target
  #          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
  #      - uses: actions-rs/toolchain@v1
  #        with:
  #          profile: minimal
  #          toolchain: stable
  #          override: true
  #      - uses: actions-rs/cargo@v1
  #        with:
  #          command: test
  #      - uses: actions-rs/cargo@v1
  #        with:
  #          command: run
  #          args: '-- -h'
  #  lints:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: actions/cache@v1
  #        with:
  #          path: ~/.cargo/registry
  #          key: '${{ runner.os }}-cargo-registry-${{ hashFiles(''**/Cargo.lock'') }}'
  #      - uses: actions/cache@v1
  #        with:
  #          path: ~/.cargo/git
  #          key: '${{ runner.os }}-cargo-index-${{ hashFiles(''**/Cargo.lock'') }}'
  #      - uses: actions/cache@v1
  #        with:
  #          path: target
  #          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
  #      - uses: actions-rs/toolchain@v1
  #        with:
  #          profile: minimal
  #          toolchain: stable
  #          override: true
  #          components: 'rustfmt, clippy'
  #      - uses: actions-rs/cargo@v1
  #        with:
  #          command: fmt
  #          args: '--all -- --check'
  #      - uses: actions-rs/cargo@v1
  #        with:
  #          command: clippy
  #          args: '-- -D warnings'
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - id: get_previous_version
        run: echo ::set-output name=PREVIOUS_VERSION::$(git describe --tags "$(git rev-list --tags --max-count=1)")
        shell: bash
      - id: semvers
        uses: WyriHaximus/github-action-next-semvers@master
        with:
          version: '${{ steps.get_previous_version.outputs.PREVIOUS_VERSION }}'
      - run: mkdir -p ./version
      - if: "!contains(github.event.head_commit.message, 'BC BREAK') && !contains(github.event.head_commit.message, 'Signed-off-by: dependabot-preview[bot] <support@dependabot.com>')"
        run: echo "$VERSION" >./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_minor }}
      - if: "contains(github.event.head_commit.message, 'Signed-off-by: dependabot-preview[bot] <support@dependabot.com>')"
        run: echo "$VERSION" >./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_patch }}
      - run: echo "$VERSION" > ./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_major }}
        if: "contains(github.event.head_commit.message, 'BC BREAK')"
      - uses: actions/upload-artifact@master
        with:
          name: version
          path: ./version/version
  build:
    runs-on: '${{ matrix.os }}'
    needs:
      - version
    strategy:
      matrix:
        include:
#         - os: macos-latest
#           target: x86_64-apple-darwin
#           suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
#         - os: windows-latest
#           target: x86_64-pc-windows-msvc
#           suffix: .exe
    steps:
      - uses: actions/checkout@master
        with:
          name: robbert-vdh/nih-plug
          ref: refs/heads/master
      - uses: actions/checkout@master
        with:
          lfs: true
      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: actions/download-artifact@master
        with:
          name: version
      - id: get_version
        run: 'echo ::set-output "name=VERSION::$(cat ./version)"'
        shell: bash
      - name: Install packages
        run: sudo apt-get install -y libasound2-dev mesa-utils libglu1-mesa-dev libxcursor-dev libjack-dev libxcb-dri2-0-dev libxcb-icccm4-dev libx11-xcb-dev
        if: "contains(matrix.os, 'ubuntu-latest')"
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: '${{ runner.os }}-cargo-registry-${{ hashFiles(''**/Cargo.lock'') }}'
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: '${{ runner.os }}-cargo-index-${{ hashFiles(''**/Cargo.lock'') }}'
      - uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions/cache@v1
        with:
          path: ~/target-toml-cli
          key: ${{ runner.os }}-target-toml-cli-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/cache@v1
        with:
          path: ~/target-cargo-nih-plug
          key: ${{ runner.os }}-target-cargo-nih-plug-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: 'toml-cli --target-dir ~/target-toml-cli'
      - uses: actions-rs/cargo@v1
        env:
          VERSION: '${{ steps.get_version.outputs.VERSION }}'
          REPOSITORY_NAME: '${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}'
        with:
          command: install
          args: '--git https://github.com/robbert-vdh/nih-plug.git cargo-nih-plug --target-dir ~/target-cargo-nih-plug'
      - shell: bash
        env:
          VERSION: '${{ steps.get_version.outputs.VERSION }}'
        run: |
          TEMP_FILE="$(mktemp)"
          toml set Cargo.toml workspace.package.version "${VERSION:1}" > "$TEMP_FILE"
          mv "$TEMP_FILE" Cargo.toml
          toml set midi-sampler/Cargo.toml package.version "${VERSION:1}" > "$TEMP_FILE"
          mv "$TEMP_FILE" midi-sampler/Cargo.toml
          toml set audio-sampler/Cargo.toml package.version "${VERSION:1}" > "$TEMP_FILE"
          mv "$TEMP_FILE" audio-sampler/Cargo.toml
      - uses: actions-rs/cargo@v1
        env:
          VERSION: '${{ steps.get_version.outputs.VERSION }}'
          REPOSITORY_NAME: '${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}'
        with:
          command: nih-plug
          args: 'bundle live-sampler --release'
      - uses: actions/upload-artifact@master
        with:
          name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-${{ matrix.target }}-vst3
          path: ./target/bundled/${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}.vst3
      - uses: actions/upload-artifact@master
        with:
          name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-${{ matrix.target }}-clap
          path: ./target/bundled/${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}.clap
  release:
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: write
      issues: read
      packages: none
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: actions/download-artifact@master
        with:
          name: version
      - id: get_version
        run: 'echo ::set-output name=VERSION::$(cat ./version)'
        shell: bash
      - uses: actions/download-artifact@master
#     - uses: actions/download-artifact@master
#       with:
#         name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-apple-darwin-vst3
#     - uses: actions/download-artifact@master
#       with:
#         name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-pc-windows-msvc-vst3
#      - uses: actions/download-artifact@master
#        with:
#          name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-unknown-linux-gnu-clap
#     - uses: actions/download-artifact@master
#       with:
#         name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-apple-darwin-clap
#     - uses: actions/download-artifact@master
#       with:
#         name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-pc-windows-msvc-clap
      - name: Display structure of downloaded files
        run: ls -R
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: 'toml-cli'
      - shell: bash
        env:
          VERSION: '${{ steps.get_version.outputs.VERSION }}'
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          set -x
          TEMP_FILE="$(mktemp)"
          toml set Cargo.toml workspace.package.version "${VERSION:1}" > "$TEMP_FILE"
          mv "$TEMP_FILE" Cargo.toml
          toml set midi-sampler/Cargo.toml package.version "${VERSION:1}" > "$TEMP_FILE"
          mv "$TEMP_FILE" midi-sampler/Cargo.toml
          toml set audio-sampler/Cargo.toml package.version "${VERSION:1}" > "$TEMP_FILE"
          mv "$TEMP_FILE" audio-sampler/Cargo.toml
          git config user.email "karunce@gmail.com"
          git config user.name "Arunas Cesonis"
      - uses: stefanzweifel/git-auto-commit-action@v4.1.3
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          skip_checkout: true
          commit_message: Bump cargo version
          #commit_user_name: Arunas Cesonis
          #commit_user_email: karunce@gmail.com
          tagging_message: '${{ steps.get_version.outputs.VERSION }}'
          branch: ${{ github.head_ref }}
          file_pattern: Cargo.toml
      - id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'Release ${{ steps.get_version.outputs.VERSION }}'
          draft: false
          prerelease: false
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-unknown-linux-gnu-vst3
          asset_name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-unknown-linux-gnu-vst3
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-unknown-linux-gnu-clap
          asset_name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-unknown-linux-gnu-clap
          asset_content_type: application/octet-stream
#     - uses: actions/upload-release-asset@v1.0.1
#       env:
#         GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
#       with:
#         upload_url: '${{ steps.create_release.outputs.upload_url }}'
#         asset_path: ./${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-apple-darwin/${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
#         asset_name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-apple-darwin
#         asset_content_type: application/octet-stream
#     - uses: actions/upload-release-asset@v1.0.1
#       env:
#         GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
#       with:
#         upload_url: '${{ steps.create_release.outputs.upload_url }}'
#         asset_path: ./${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-pc-windows-msvc/${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}.exe
#         asset_name:  ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-x86_64-pc-windows-msvc.exe
#         asset_content_type: application/octet-stream

